1. ID
This is the unique identifier of the bug found

2. Summary
A short and concise description of the bug that answers the question 
What happened and under what conditions.

3. Preconditions
This is usually what needs to be done before performing our playback steps. 
Perhaps you need to create a special structure or users with different roles 
or templates needed to reproduce this bug.

4. Steps to Reproduce
The field is used to describe the reproduction steps at which our bug will be reproduced.
For example
1) Open login page of admin panel
2) Enter valid credentials into "Username" and "Password" text fields
3) Press Enter button
That is, this field describes the detailed steps until the moment when we see the bug
After the last step, we should see the result, which is a bug in this situation.

5. Actual Result
Here we describe what we got at the last step by going through all the steps
For example, it can be described like this:
"You have entered incorrect user or password" message is displayed on login page

6. Expected Result
In this field they write what should be how the software should behave at the last
step of the reproduction of steps.

7. Project
This is a shot down list with project names.

8. Build number

9. Priority
This field is used to determine the priority of the bug, usually set by the
project manager or the scrum master, thus determining the priority of fixing the bug 
against the background of the rest of the bugs found, thus conducting the order of fixing bugs
There are such priorities:
High: Highest, first priority
Medium: Medium priority
Low: Most recent

10. Severity
This field indicates the severity of the error. There are several levels of error severity such as:
Blocker:Set if a bug blocks the further operation of the application or blocks further testing, 
for example, such a bug that if you create a user with an existing name, then no user from the entire
system can log in as an SQL error is displayed on the main page and you cannot go anywhere else
Critical: Placed when the software behavior is significantly influenced and the program behavior
is incorrect, but does not block the application, for example, a bug such that a user can enter 
the system without entering a password
Major: To be placed with a minor impact on the behavior of the software, and not critical for
 our project, for example, such a bug that if the number of entries in the list of entries
 is calculated incorrectly

11. Reporter
Usually filled in automatically with the name of the person who creates the bug report

12. Status
The status field is filled in automatically to open, then it can be changed by the developer,
 tester or project manager, depending on what stage our bug is at.

13.Comments
In the comments, you can indicate that the bug has been checked and indicate in which
 build you checked






